<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=1300">
  <style id="distill-article-specific-styles">
    <%= require("raw-loader!./style.css") %>
  </style>
  <style>
    /* Override default list styling to prevent double bullets */
    d-contents ul, d-contents li {
      list-style-type: none !important;
    }
    d-contents li::marker {
      display: none !important;
      content: '' !important;
    }
  </style>
  <script src="https://distill.pub/template.v2.js"></script>
  <!-- Bundle will be automatically injected here by webpack -->
</head>
<body>

<d-front-matter>
  <script type="text/json">{
  "title": "AI Assisted Engineering",
  "description": "A blog post about AI assisted engineering",
  "authors": [
    {
      "author": "Amrit Krishnan",
      "authorURL": "https://github.com/amrit110",
      "affiliation": "Vector Institute",
      "affiliationURL": "https://vectorinstitute.ai"
    }, {
      "author": "",
      "authorURL": "",
      "affiliation": "",
      "affiliationURL": ""
    }
  ],
  "katex": {
    "delimiters": [
      {"left": "$", "right": "$", "display": false},
      {"left": "$$", "right": "$$", "display": true}
    ]
  }
  }</script>
</d-front-matter>

<d-title>
  <h1>AI Assisted Engineering</h1>
  <p>
    Software engineering is undergoing a transformation with the advent of AI-assisted tools. This blog explores the evolution of these tools, from simple code completion to sophisticated agentic assistants that can reason about and modify entire codebases.
  </p>
</d-title>

<d-byline></d-byline>

<d-article>
  <d-contents>
    <nav class="toc figcaption">
      <h4>Table of Contents</h4>
      <div class="toc-section"><a href="#introduction">Introduction</a></div>
      <div class="toc-section"><a href="#language-server-protocols">Language Server Protocols</a></div>
      <div class="toc-section"><a href="#github-copilot">GitHub Copilot</a></div>
      <div class="toc-section"><a href="#agentic-coding-assistants">Agentic Coding Assistants</a></div>
      <div class="toc-section"><a href="#conclusion">Conclusion</a></div>
      <div class="toc-section">Appendix</div>
      <div class="toc-section" style="margin-left: 15px;"><a href="#github-mcp-demo">GitHub MCP Server Demo</a></div>
    </nav>
    <div class="toc-line"></div>
  </d-contents>

  <h2 id="introduction">Introduction</h2>

  <p>AI-assisted software engineering has transformed how developers write, test, and maintain code. From autocomplete suggestions to fully autonomous agents, these tools are reshaping the development landscape. This blog traces this evolution, examining how today's AI tools can understand context, reason about requirements, and modify entire codebases with minimal human guidance.</p>

  <figure style="text-align: center; margin: 30px auto;">
    <img src="./diagrams/ycm.gif" alt="YouCompleteMe" style="width: 100%; max-width: 700px; margin: 0 auto;">
    <figcaption style="margin-top: 10px; text-align: center; max-width: 700px; margin-left: auto; margin-right: auto;">
      <p>Early code intelligence: YouCompleteMe demonstrates language-aware completion using the Language Server Protocol (LSP), a precursor to modern AI coding assistants.<d-cite key="youcompleteme" /></p>
    </figcaption>
  </figure>

  <h2 id="language-server-protocols">Language Server Protocols</h2>

  <p>The Language Server Protocol (LSP) introduced a standardized way for editors and language-specific backends to communicate. Developed by Microsoft for VS Code and now widely adopted, LSP solved a fundamental problem: enabling rich language features without duplicating work across editors and languages.</p>

  <p>Before LSP, each editor needed custom integrations for every language, creating a combinatorial explosion of implementations. LSP elegantly separates editor concerns from language-specific intelligence, allowing any compliant editor to leverage language servers for features like code completion, diagnostics, and refactoring.</p>

  <h3>How LSP Works</h3>

  <p>When you open a file in your editor, the editor (acting as a client) connects to a language server that understands that specific programming language. As you type, the editor sends the source code and user actions to the language server using JSON-RPC messages over a communication channel. The language server analyzes the code and sends back information such as:</p>

  <ul>
    <li>Code completion suggestions (e.g., showing method names as you type)</li>
    <li>Diagnostics (errors and warnings in your code)</li>
    <li>Code formatting recommendations</li>
    <li>Symbol definitions and references (for "go to definition" features)</li>
    <li>Refactoring suggestions</li>
  </ul>

  <p>For example, when you type <code><span style="color: #ff5722; font-weight: bold;">document.</span></code> in JavaScript, the editor sends this context to the JavaScript language server, which responds with a list of valid methods and properties that can follow. This all happens through standardized JSON-RPC messages defined by the LSP specification.</p>

  <figure class="l-screen" style="width: 100%; margin: 30px 0; padding: 0;">
    <div id="lsp-diagram" style="width: 100%; height: 420px; margin: 0 auto; background-color: transparent; border-radius: 8px; position: relative; overflow: hidden; border: 1px solid #e5e5e5; box-shadow: 0 0 20px rgba(0,0,0,0.05);">
      <!-- Fixed diagram with animations -->
      <svg width="100%" height="100%" viewBox="0 0 1200 400" xmlns="http://www.w3.org/2000/svg">
        <!-- Definitions for markers -->
        <defs>
          <!-- Right arrow -->
          <marker id="arrow-head" viewBox="0 0 10 10" refX="5" refY="5" markerWidth="6" markerHeight="6" orient="auto">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="#5a5a5a" />
          </marker>
          <!-- Left arrow -->
          <marker id="arrow-tail" viewBox="0 0 10 10" refX="5" refY="5" markerWidth="6" markerHeight="6" orient="auto-start-reverse">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="#5a5a5a" />
          </marker>

          <!-- Animation definitions -->
          <style>
            .animated-line {
              stroke-dasharray: 10 8;
              animation: dash 2.5s linear infinite;
            }

            @keyframes dash {
              to {
                stroke-dashoffset: -36;
              }
            }

            .pulse-comp {
              animation: pulse 3.5s ease-in-out infinite;
            }

            @keyframes pulse {
              0% { fill: #0078d4; }
              50% { fill: #2b88d8; }
              100% { fill: #0078d4; }
            }

            .box-shadow {
              filter: drop-shadow(0px 2px 3px rgba(0, 0, 0, 0.15));
            }
          </style>
        </defs>

        <!-- Editor side -->
        <rect x="50" y="20" width="300" height="360" fill="none" stroke="#a0a0a0" stroke-dasharray="4" rx="6" />
        <text x="200" y="45" text-anchor="middle" fill="#555" font-family="system-ui, -apple-system, sans-serif" font-weight="600">Editor</text>

        <rect class="box-shadow" x="80" y="80" width="100" height="60" fill="#f0f0f0" stroke="#c0c0c0" rx="6" />
        <text x="130" y="112" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif">UI</text>

        <rect class="box-shadow" x="220" y="80" width="100" height="60" fill="#f0f0f0" stroke="#c0c0c0" rx="6" />
        <text x="270" y="112" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif">Buffers</text>

        <!-- Language Client -->
        <rect class="box-shadow" id="lang-client" x="130" y="240" width="140" height="80" class="pulse-comp" fill="#0078d4" stroke="#0065b3" rx="6" />
        <text x="200" y="272" text-anchor="middle" fill="white" font-family="system-ui, -apple-system, sans-serif" font-weight="500">Language Client</text>
        <text x="200" y="292" text-anchor="middle" fill="white" font-family="system-ui, -apple-system, sans-serif" font-size="14px">(extension)</text>

        <!-- Middle -->
        <rect class="box-shadow" x="400" y="120" width="120" height="80" fill="#f0f0f0" stroke="#c0c0c0" rx="6" />
        <text x="460" y="162" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif">Source Code</text>

        <!-- LSP Label -->
        <rect x="435" y="245" width="50" height="26" fill="white" stroke="#5c98d2" stroke-width="1.5" rx="13" />
        <text x="460" y="262" text-anchor="middle" fill="#0078d4" font-family="system-ui, -apple-system, sans-serif" font-size="16px" font-weight="700" letter-spacing="0.5px">LSP</text>

        <!-- Server side -->
        <rect x="580" y="20" width="390" height="360" fill="none" stroke="#a0a0a0" stroke-dasharray="4" rx="6" />
        <text x="775" y="45" text-anchor="middle" fill="#555" font-family="system-ui, -apple-system, sans-serif" font-weight="600">Language Server</text>

        <rect class="box-shadow" x="600" y="80" width="140" height="80" fill="#f0f0f0" stroke="#c0c0c0" rx="6" />
        <text x="670" y="110" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif">Completion</text>
        <text x="670" y="130" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif" font-size="14px">Service</text>

        <rect class="box-shadow" x="780" y="80" width="140" height="80" fill="#f0f0f0" stroke="#c0c0c0" rx="6" />
        <text x="850" y="110" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif">Diagnostics</text>
        <text x="850" y="130" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif" font-size="14px">Service</text>

        <!-- JSON-RPC Router -->
        <rect class="box-shadow" id="json-rpc" x="600" y="240" width="140" height="80" class="pulse-comp" fill="#0078d4" stroke="#0065b3" rx="6" />
        <text x="670" y="272" text-anchor="middle" fill="white" font-family="system-ui, -apple-system, sans-serif" font-weight="500">JSON-RPC</text>
        <text x="670" y="292" text-anchor="middle" fill="white" font-family="system-ui, -apple-system, sans-serif" font-size="14px">Router</text>

        <rect class="box-shadow" x="780" y="240" width="140" height="80" fill="#f0f0f0" stroke="#c0c0c0" rx="6" />
        <text x="850" y="272" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif">Formatting</text>
        <text x="850" y="292" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif" font-size="14px">Service</text>

        <!-- Animated connections between Language Client and UI/Buffers -->
        <line x1="200" y1="240" x2="130" y2="140" stroke="#5c98d2" stroke-width="1.5" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />
        <line x1="245" y1="240" x2="270" y2="140" stroke="#5c98d2" stroke-width="1.5" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />

        <!-- Animated Connections with Labels -->
        <!-- Editor to Source connections -->
        <rect x="335" y="130" width="30" height="16" fill="white" stroke="#d0d0d0" rx="3" />
        <text x="350" y="143" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif" font-size="12px">R/W</text>
        <line x1="280" y1="140" x2="400" y2="140" stroke="#5c98d2" stroke-width="2" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />

        <!-- Source to Language Server connection - Read-only -->
        <rect x="520" y="130" width="30" height="16" fill="white" stroke="#d0d0d0" rx="3" />
        <text x="535" y="143" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif" font-size="12px">R</text>
        <line x1="520" y1="140" x2="600" y2="140" stroke="#5c98d2" stroke-width="2" class="animated-line" marker-end="url(#arrow-head)" />

        <!-- Server-side connections -->
        <line x1="670" y1="240" x2="670" y2="160" stroke="#5c98d2" stroke-width="2" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />
        <line x1="710" y1="240" x2="820" y2="160" stroke="#5c98d2" stroke-width="2" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />
        <line x1="740" y1="264" x2="780" y2="264" stroke="#5c98d2" stroke-width="2" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />

        <!-- Primary LSP connection - the main JSON-RPC communication path -->
        <line x1="270" y1="280" x2="600" y2="280" stroke="#0078d4" stroke-width="3" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />

        <!-- LSP label on the connection -->
        <rect x="420" y="270" width="70" height="20" fill="white" stroke="#5c98d2" rx="4" />
        <text x="455" y="285" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif" font-size="12px" font-weight="500">JSON-RPC</text>
      </svg>
    </div>
    <figcaption style="margin-top: 20px; text-align: left; max-width: 1000px; margin-left: auto; margin-right: auto;">
      <p>The Language Server Protocol architecture separates editor functionality from language-specific features. The animated lines show JSON-RPC messages flowing between the language client (in the editor) and language server through a standardized protocol. The R/W indicates read/write operations with source code, while R indicates read-only operations.</p>
    </figcaption>
  </figure>

  <p>One important feature that editors provide is consistent, language-aware syntax highlighting. This feature uses the <code><span style="color: #ff5722; font-weight: bold;">textDocument/semanticTokens</span></code> function that LSPs offer.</p>

  <figure class="l-screen" style="width: 100%; margin: 30px 0; padding: 0;">
    <div id="semantic-tokens-diagram" style="width: 100%; height: 450px; margin: 0 auto; background-color: transparent; border-radius: 8px; position: relative; overflow: hidden; border: 1px solid #e5e5e5; box-shadow: 0 0 20px rgba(0,0,0,0.05);">
      <svg width="100%" height="100%" viewBox="0 0 1000 450" xmlns="http://www.w3.org/2000/svg">
        <!-- Style definitions -->
        <defs>
          <style>
            @keyframes blink {
              0%, 100% { opacity: 1; }
              50% { opacity: 0; }
            }
            @keyframes flow {
              0% { stroke-dashoffset: 24; }
              100% { stroke-dashoffset: 0; }
            }
            @keyframes typewriter {
              0% { opacity: 0; }
              10% { opacity: 1; }
              80% { opacity: 1; }
              90% { opacity: 0; }
              100% { opacity: 0; }
            }
            @keyframes cursorMove {
              0% { transform: translateX(0); transform: translateY(0); }
              20% { transform: translateX(280px); transform: translateY(0); }
              25% { transform: translateX(0); transform: translateY(20px); }
              40% { transform: translateX(150px); transform: translateY(20px); }
              45% { transform: translateX(0); transform: translateY(40px); }
              60% { transform: translateX(200px); transform: translateY(40px); }
              65% { transform: translateX(0); transform: translateY(60px); }
              80% { transform: translateX(220px); transform: translateY(60px); }
              85% { transform: translateX(0); transform: translateY(80px); }
              100% { transform: translateX(280px); transform: translateY(80px); }
            }
            @keyframes requestAnimation {
              0%, 90%, 100% { opacity: 0; }
              20%, 70% { opacity: 1; }
            }
            @keyframes responseAnimation {
              0%, 40%, 100% { opacity: 0; }
              60%, 80% { opacity: 1; }
            }

            .animated-arrow {
              stroke-dasharray: 6 4;
              animation: flow 1.5s linear infinite;
            }
            .cursor {
              animation: blink 1s step-start infinite, cursorMove 8s step-end infinite;
            }
            .active {
              animation: flow 1.5s linear infinite;
            }
            .keyword { fill: #0000FF !important; }
            .function-name { fill: #795E26 !important; }
            .variable { fill: #1a1a1a !important; }
            .number { fill: #098658 !important; }
            .operator { fill: #800080 !important; }
            .string { fill: #A31515 !important; }
            .mono-text { font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace; }

            #request-arrow {
              animation: requestAnimation 8s infinite;
            }
            #response-arrow {
              animation: responseAnimation 8s infinite;
            }

            .typing-animation {
              opacity: 0;
              animation: typewriter 8s forwards infinite;
            }
            .char1 { animation-delay: 0.2s; }
            .char2 { animation-delay: 0.4s; }
            .char3 { animation-delay: 0.6s; }
            .char4 { animation-delay: 0.8s; }
            .char5 { animation-delay: 1.0s; }
            .char6 { animation-delay: 1.2s; }
            .char7 { animation-delay: 1.4s; }
            .char8 { animation-delay: 1.6s; }
            .char9 { animation-delay: 1.8s; }
            .char10 { animation-delay: 2.0s; }
            .char11 { animation-delay: 2.2s; }
            .char12 { animation-delay: 2.4s; }
            .char13 { animation-delay: 2.6s; }
            .char14 { animation-delay: 2.8s; }
            .char15 { animation-delay: 3.0s; }
            .char16 { animation-delay: 3.2s; }
            .char17 { animation-delay: 3.4s; }
            .char18 { animation-delay: 3.6s; }
            .char19 { animation-delay: 3.8s; }
            .char20 { animation-delay: 4.0s; }
            .char21 { animation-delay: 4.2s; }
            .char22 { animation-delay: 4.4s; }
            .char23 { animation-delay: 4.6s; }
            .char24 { animation-delay: 4.8s; }
            .char25 { animation-delay: 5.0s; }
            .char26 { animation-delay: 5.2s; }
            .char27 { animation-delay: 5.4s; }
            .char28 { animation-delay: 5.6s; }
            .char29 { animation-delay: 5.8s; }
            .char30 { animation-delay: 6.0s; }
          </style>

          <!-- Arrow markers -->
          <marker id="request-arrow-marker" viewBox="0 0 10 10" refX="5" refY="5" markerWidth="6" markerHeight="6" orient="auto">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="#2b7cb3" />
          </marker>
          <marker id="response-arrow-marker" viewBox="0 0 10 10" refX="5" refY="5" markerWidth="6" markerHeight="6" orient="auto">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="#198754" />
          </marker>
        </defs>

        <!-- Editor Box -->
        <rect x="40" y="40" width="360" height="360" rx="6" fill="#ffffff" stroke="#d1d1d1" stroke-width="2" />
        <text x="220" y="25" text-anchor="middle" font-family="system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto" font-size="16" font-weight="bold" fill="#333">Code Editor</text>

        <!-- Editor title bar -->
        <rect x="40" y="40" width="360" height="30" rx="6 6 0 0" fill="#f3f3f3" stroke="#d1d1d1" stroke-width="1" />
        <text x="60" y="60" font-family="system-ui, -apple-system, sans-serif" font-size="14" fill="#333">example.py</text>

        <!-- Code area with syntax highlighting -->
        <rect x="40" y="70" width="360" height="330" fill="#ffffff" />

        <!-- Code text with pre-defined animation -->
        <text id="code-text" x="40" y="100" class="mono-text" font-size="14" fill="#000000">
          <!-- Line-by-line animation with proper indentation -->
          <tspan x="60" dy="0" class="typing-animation" style="animation-delay: 0.2s">
            <tspan class="keyword">def</tspan><tspan> </tspan><tspan class="function-name">calculate_average</tspan><tspan>(</tspan><tspan class="variable">numbers</tspan><tspan>):</tspan>
          </tspan>
          <tspan x="60" dy="20" class="typing-animation" style="animation-delay: 1.5s">
            <tspan x="90" class="variable">total</tspan><tspan> </tspan><tspan class="operator">=</tspan><tspan> </tspan><tspan class="number">0</tspan>
          </tspan>
          <tspan x="60" dy="20" class="typing-animation" style="animation-delay: 2.5s">
            <tspan x="90" class="keyword">for</tspan><tspan> </tspan><tspan class="variable">num</tspan><tspan> </tspan><tspan class="keyword">in</tspan><tspan> </tspan><tspan class="variable">numbers</tspan><tspan>:</tspan>
          </tspan>
          <tspan x="60" dy="20" class="typing-animation" style="animation-delay: 3.5s">
            <tspan x="120" class="variable">total</tspan><tspan> </tspan><tspan class="operator">+=</tspan><tspan> </tspan><tspan class="variable">num</tspan>
          </tspan>
          <tspan x="60" dy="20" class="typing-animation" style="animation-delay: 4.5s">
            <tspan x="90" class="keyword">return</tspan><tspan> </tspan><tspan class="variable">total</tspan><tspan> </tspan><tspan class="operator">/</tspan><tspan> </tspan><tspan class="keyword">len</tspan><tspan>(</tspan><tspan class="variable">numbers</tspan><tspan>)</tspan>
          </tspan>
        </text>

        <!-- No typing cursor -->

        <!-- Server Box -->
        <rect x="600" y="40" width="360" height="360" rx="6" fill="#ffffff" stroke="#d1d1d1" stroke-width="2" />
        <text x="780" y="25" text-anchor="middle" font-family="system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto" font-size="16" font-weight="bold" fill="#333">Language Server</text>

        <!-- Server title bar -->
        <rect x="600" y="40" width="360" height="30" rx="6 6 0 0" fill="#f3f3f3" stroke="#d1d1d1" stroke-width="1" />
        <text x="620" y="60" font-family="system-ui, -apple-system, sans-serif" font-size="14" fill="#333">Python Language Server</text>

        <!-- Server content area -->
        <rect x="600" y="70" width="360" height="330" fill="#f8f9fa" />

        <!-- Server content -->
        <text x="620" y="100" font-family="system-ui, -apple-system, sans-serif" font-size="14" font-weight="bold" fill="#333">semanticTokens Request Handler</text>

        <!-- JSON response -->
        <rect x="620" y="120" width="320" height="220" rx="4" fill="#f1f1f1" stroke="#d1d1d1" />
        <text id="server-response-data" x="630" y="140" class="mono-text" font-size="9" fill="#000">
          <tspan x="630" dy="0" class="typing-animation" style="animation-delay: 3.0s">{</tspan>
          <tspan x="640" dy="14" class="typing-animation" style="animation-delay: 3.1s">  "data": [</tspan>
          <tspan x="650" dy="14" class="typing-animation" style="animation-delay: 3.2s">    {</tspan>
          <tspan x="660" dy="14" class="typing-animation" style="animation-delay: 3.3s">      "line": 0, "character": 0,</tspan>
          <tspan x="660" dy="14" class="typing-animation" style="animation-delay: 3.4s">      "length": 3, "tokenType": "keyword"</tspan>
          <tspan x="650" dy="14" class="typing-animation" style="animation-delay: 3.5s">    },</tspan>
          <tspan x="650" dy="14" class="typing-animation" style="animation-delay: 3.6s">    {</tspan>
          <tspan x="660" dy="14" class="typing-animation" style="animation-delay: 3.7s">      "line": 0, "character": 4,</tspan>
          <tspan x="660" dy="14" class="typing-animation" style="animation-delay: 3.8s">      "length": 17, "tokenType": "function",</tspan>
          <tspan x="660" dy="14" class="typing-animation" style="animation-delay: 3.9s">      "tokenModifiers": ["declaration"]</tspan>
          <tspan x="650" dy="14" class="typing-animation" style="animation-delay: 4.0s">    },</tspan>
          <tspan x="650" dy="14" class="typing-animation" style="animation-delay: 4.1s">    ...</tspan>
          <tspan x="640" dy="14" class="typing-animation" style="animation-delay: 4.2s">  ],</tspan>
          <tspan x="640" dy="14" class="typing-animation" style="animation-delay: 4.3s">  "resultId": "semanticTokens-123"</tspan>
          <tspan x="630" dy="14" class="typing-animation" style="animation-delay: 4.4s">}</tspan>
        </text>

        <!-- Communication arrows -->
        <text x="500" y="155" text-anchor="middle" font-family="system-ui, -apple-system, sans-serif" font-size="14" font-weight="bold" fill="#2b7cb3">semanticTokens Request</text>
        <line id="request-arrow" x1="410" y1="170" x2="590" y2="170" stroke="#2b7cb3" stroke-width="2" class="animated-arrow" marker-end="url(#request-arrow-marker)" />

        <text x="500" y="235" text-anchor="middle" font-family="system-ui, -apple-system, sans-serif" font-size="14" font-weight="bold" fill="#198754">Token Data Response</text>
        <line id="response-arrow" x1="590" y1="250" x2="410" y2="250" stroke="#198754" stroke-width="2" class="animated-arrow" marker-end="url(#response-arrow-marker)" />

        <!-- LSP label -->
        <rect x="465" y="280" width="70" height="30" rx="15" fill="#ffffff" stroke="#5c98d2" stroke-width="1.5" />
        <text x="500" y="300" text-anchor="middle" font-family="system-ui, -apple-system, sans-serif" font-size="16" font-weight="bold" fill="#0078d4">LSP</text>
      </svg>
    </div>
    <figcaption style="margin-top: 20px; text-align: left; max-width: 1000px; margin-left: auto; margin-right: auto;">
      <p>As you type Python code in the editor, the language server provides semantic token information that enables the editor to consistently highlight syntax elements like keywords, function names, and variables. This creates a consistent experience across any LSP-compatible editor.</p>
    </figcaption>
  </figure>

  <p>This architecture has revolutionized developer tools by enabling:</p>

  <div style="overflow-x: auto; margin: 20px 0;">
    <table style="width: 100%; border-collapse: collapse; border: 1px solid #e0e0e0; font-size: 14px; box-shadow: 0 2px 8px rgba(0,0,0,0.05);">
      <thead>
        <tr style="background-color: #f5f5f5;">
          <th style="padding: 12px 15px; text-align: left; border-bottom: 2px solid #ddd; border-right: 1px solid #ddd;">Key Benefit</th>
          <th style="padding: 12px 15px; text-align: left; border-bottom: 2px solid #ddd;">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; font-weight: bold; background-color: #f8fbff;">Editor independence</td>
          <td style="padding: 10px 15px; border-bottom: 1px solid #ddd;">Language servers work with any LSP-compatible editor</td>
        </tr>
        <tr>
          <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; font-weight: bold; background-color: #f8fbff;">Language independence</td>
          <td style="padding: 10px 15px; border-bottom: 1px solid #ddd;">Editors don't need built-in knowledge of each language</td>
        </tr>
        <tr>
          <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; font-weight: bold; background-color: #f8fbff;">Shared investment</td>
          <td style="padding: 10px 15px; border-bottom: 1px solid #ddd;">The community can improve one language server that benefits all editors</td>
        </tr>
        <tr>
          <td style="padding: 10px 15px; border-right: 1px solid #ddd; font-weight: bold; background-color: #f8fbff;">Consistent experience</td>
          <td style="padding: 10px 15px;">Features work the same way across different editors</td>
        </tr>
      </tbody>
    </table>
  </div>


  <h2 id="github-copilot">GitHub Copilot</h2>

  <p>GitHub Copilot marked a leap forward in AI-assisted coding, introducing the era of LLM-powered pair programming. Trained on billions of lines of public code, Copilot generates context-aware suggestions ranging from simple function completions to entire algorithm implementations, often anticipating a developer's intent before they fully express it.</p>

  <figure style="text-align: center; margin: 30px auto;">
    <img src="./diagrams/copilot.gif" alt="GitHub Copilot in action" style="width: 100%; max-width: 700px; margin: 0 auto;">
    <figcaption style="margin-top: 10px; text-align: center; max-width: 700px; margin-left: auto; margin-right: auto;">
      <p>GitHub Copilot in action: Real-time, context-aware code suggestions that can dramatically accelerate development workflows and reduce boilerplate coding.</p>
    </figcaption>
  </figure>

  <figure style="text-align: center; margin: 30px auto;">
    <img src="./diagrams/copilot_pr.png" alt="GitHub Copilot reviewing a pull request" style="width: 100%; max-width: 700px; margin: 0 auto;">
    <figcaption style="margin-top: 10px; text-align: center; max-width: 700px; margin-left: auto; margin-right: auto;">
      <p>GitHub Copilot reviewing a PR and making a code suggestion to fix an issue.</p>
    </figcaption>
  </figure>

  <h2 id="agentic-coding-assistants">Agentic Coding Assistants</h2>

  <p>While code completion tools suggest what to write next, agentic assistants represent a fundamental shift in capability. These systems can plan and execute complex multi-step tasks, exploring codebases, formulating solutions, and implementing changes autonomously. They embody a deeper understanding of software engineering processes, capable of reasoning about architecture, debugging complex issues, and adapting to project-specific idioms and patterns.</p>


  <figure style="text-align: center; margin: 30px auto;">
    <img src="./diagrams/agent.svg" alt="Agentic Software Engineering Assistant" style="width: 100%; max-width: 700px; margin: 0 auto;">
    <figcaption style="margin-top: 10px; text-align: center; max-width: 700px; margin-left: auto; margin-right: auto;">
        <p>Agents are LLMs using tools based on environmental feedback in a loop.<d-cite key="anthropic2023building"/></p>
    </figcaption>
  </figure>


  <figure style="text-align: center; margin: 30px auto;">
    <img src="./diagrams/swe-agent.png" alt="Agentic Software Engineering Assistant" style="width: 100%; max-width: 700px; margin: 0 auto;">
    <figcaption style="margin-top: 10px; text-align: center; max-width: 700px; margin-left: auto; margin-right: auto;">
      <p>SWE-agent is an example of a coding agent. Its environment consists of a computer with a terminal and a file system. Its set of actions includes navigating the repository, searching files, viewing files, and editing lines.<d-cite key="huyenagents"/><d-cite key="yang2024swe"/></p>
    </figcaption>
  </figure>

  <h3>Popular Agentic Coding Assistants</h3>

  <p>The ecosystem of agentic coding assistants has grown rapidly, with tools broadly divided into two categories: IDE-integrated and terminal-based solutions. Each offers different levels of autonomy, context handling, and user experience.</p>

  <div style="display: flex; justify-content: space-between; margin-bottom: 20px;">
    <div style="width: 48%;">
      <h4>IDE-Based Tools</h4>
      <p>These assistants integrate directly into development environments, offering seamless coding experiences with visual feedback and intuitive interfaces.</p>
      <ul>
        <li><strong>Cursor</strong> - A dedicated IDE with fully autonomous coding capabilities<d-cite key="cursor" /></li>
        <li><strong>VS Code Copilot Agent Mode</strong> - Built into VS Code with natural language task definition<d-cite key="vscodeagent" /></li>
      </ul>
    </div>
    <div style="width: 48%;">
      <h4>Terminal-Based Tools</h4>
      <p>Command-line tools offer power users flexibility, scriptability, and integration with existing terminal workflows.</p>
      <ul>
        <li><strong>Claude Code</strong> - Feature rich CLI tool with scriptable agents<d-cite key="claudecode"/></li>
        <li><strong>OpenAI Codex CLI</strong> - Early stage effort with open-source foundations<d-cite key="codex" /></li>
      </ul>
    </div>
  </div>

  <figure style="margin: 30px auto;">
    <div style="overflow-x: auto;">
      <table style="width: 100%; border-collapse: collapse; border: 1px solid #e0e0e0; font-size: 14px; margin-bottom: 20px;">
        <thead>
          <tr style="background-color: #f5f5f5;">
            <th style="padding: 12px 15px; text-align: left; border-bottom: 2px solid #ddd; border-right: 1px solid #ddd;">Feature</th>
            <th style="padding: 12px 15px; text-align: left; border-bottom: 2px solid #ddd; border-right: 1px solid #ddd; background-color: #f0f7ff;">Claude Code</th>
            <th style="padding: 12px 15px; text-align: left; border-bottom: 2px solid #ddd; border-right: 1px solid #ddd; background-color: #f0fff7;">OpenAI Codex CLI</th>
            <th style="padding: 12px 15px; text-align: left; border-bottom: 2px solid #ddd; border-right: 1px solid #ddd; background-color: #f7f0ff;">Cursor</th>
            <th style="padding: 12px 15px; text-align: left; border-bottom: 2px solid #ddd; background-color: #fff0f7;">VS Code Copilot Agent</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; font-weight: bold;">Interface</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #f8fbff;">Command line</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #f8fff8;">Command line</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #faf8ff;">IDE (Cursor IDE)</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; background-color: #fff8fa;">IDE (VS Code)</td>
          </tr>
          <tr>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; font-weight: bold;">Autonomy</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #f8fbff;">Highly agentic, customizable</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #f8fff8;">Adjustable (3 approval modes)</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #faf8ff;">Fully autonomous (default mode)</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; background-color: #fff8fa;">Autonomous with user review</td>
          </tr>
          <tr>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; font-weight: bold;">Context Handling</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #f8fbff;">Pulls context, uses CLAUDE.md file</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #f8fff8;">Multimodal (text, screenshots)</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #faf8ff;">Explores codebase, reads docs/web</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; background-color: #fff8fa;">Determines relevant files/context</td>
          </tr>
          <tr>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; font-weight: bold;">Tool Integration</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #f8fbff;">CLI tools, bash, web-fetch. MCP support.</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #f8fff8;">CLI tools, runs code, file ops</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #faf8ff;">Full tool access, terminal commands</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; background-color: #fff8fa;">Invokes tools via MCP protocol</td>
          </tr>
          <tr>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; font-weight: bold;">Platform Support</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #f8fbff;">Cross-platform (CLI)</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #f8fff8;">macOS/Linux (Windows via WSL)</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #faf8ff;">Cross-platform (IDE)</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; background-color: #fff8fa;">Cross-platform (VS Code)</td>
          </tr>
          <tr>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; font-weight: bold;">Best For</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #f8fbff;">Power users, researchers</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #f8fff8;">Programmers wanting CLI agents</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; border-right: 1px solid #ddd; background-color: #faf8ff;">Developers seeking smooth UX</td>
            <td style="padding: 10px 15px; border-bottom: 1px solid #ddd; background-color: #fff8fa;">VS Code users, Copilot subscribers</td>
          </tr>
          <tr>
            <td style="padding: 10px 15px; border-right: 1px solid #ddd; font-weight: bold;">Current Maturity</td>
            <td style="padding: 10px 15px; border-right: 1px solid #ddd; background-color: #f8fbff;">
              <div style="position: relative; height: 20px; background-color: #e9ecef; border-radius: 4px; overflow: hidden;">
                <div style="position: absolute; width: 80%; height: 100%; background-color: #4582ec; border-radius: 4px;"></div>
                <div style="position: relative; text-align: center; color: #212529; font-weight: bold; line-height: 20px; font-size: 12px;">4 / 5</div>
              </div>
            </td>
            <td style="padding: 10px 15px; border-right: 1px solid #ddd; background-color: #f8fff8;">
              <div style="position: relative; height: 20px; background-color: #e9ecef; border-radius: 4px; overflow: hidden;">
                <div style="position: absolute; width: 30%; height: 100%; background-color: #f0ad4e; border-radius: 4px;"></div>
                <div style="position: relative; text-align: center; color: #212529; font-weight: bold; line-height: 20px; font-size: 12px;">1.5 / 5</div>
              </div>
            </td>
            <td style="padding: 10px 15px; border-right: 1px solid #ddd; background-color: #faf8ff;">
              <div style="position: relative; height: 20px; background-color: #e9ecef; border-radius: 4px; overflow: hidden;">
                <div style="position: absolute; width: 80%; height: 100%; background-color: #4582ec; border-radius: 4px;"></div>
                <div style="position: relative; text-align: center; color: #212529; font-weight: bold; line-height: 20px; font-size: 12px;">4 / 5</div>
              </div>
            </td>
            <td style="padding: 10px 15px; background-color: #fff8fa;">
              <div style="position: relative; height: 20px; background-color: #e9ecef; border-radius: 4px; overflow: hidden;">
                <div style="position: absolute; width: 80%; height: 100%; background-color: #4582ec; border-radius: 4px;"></div>
                <div style="position: relative; text-align: center; color: #212529; font-weight: bold; line-height: 20px; font-size: 12px;">4 / 5</div>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <figcaption style="margin-top: 10px; text-align: left; max-width: 1000px; margin-left: auto; margin-right: auto;">
      <p>Comparison of popular agentic coding assistants across key attributes. Each tool offers different trade-offs in terms of interface, autonomy, and specialized features.</p>
    </figcaption>
  </figure>

  <p>These tools are evolving at a remarkable pace, with each iteration bringing improvements in reasoning, context retention, and tool integration. Your choice between IDE-integrated or terminal-based options typically hinges on workflow preferences – visual feedback and seamless integration versus power-user flexibility and customization potential.</p>

  <h3>Model Context Protocol (MCP) Servers</h3>

  <p>Model Context Protocol (MCP) does for LLMs what LSP did for language-specific tools – it standardizes how applications provide context to language models<d-cite key="mcp" />. This open protocol creates a consistent interface between applications and AI models, dramatically simplifying integration and enabling powerful new interaction patterns between tools and models.</p>

  <figure style="text-align: center; margin: 30px auto;">
    <img src="./diagrams/mcp.gif" alt="YouCompleteMe" style="width: 100%; max-width: 700px; margin: 0 auto;">
    <figcaption style="margin-top: 10px; text-align: center; max-width: 700px; margin-left: auto; margin-right: auto;">
      <p>MCP bridges applications and AI models: This visualization shows how the protocol enables unified context-gathering from diverse data sources, creating richer AI interactions.<d-cite key="mcpvisual" /></p>
    </figcaption>
  </figure>

  <h4>Example: GitHub MCP Server</h4>

  <p>GitHub's MCP server provides a powerful way to automate tasks related to software development directly on GitHub. It exposes a set of tools that developers and AI assistants can use to interact with repositories, code, and other GitHub resources through a standardized interface.<d-cite key="githubmcp" /></p>

  <div style="margin: 20px 0; padding: 20px; background-color: #f8f9fa; border-radius: 8px; border-left: 4px solid #0366d6;">
    <h5 style="margin-top: 0;">5 out of 30 GitHub MCP Tools:</h5>
    <ul style="margin-bottom: 0;">
      <li><strong>add_issue_comment</strong>: Add a comment to an existing issue</li>
      <li><strong>create_issue</strong>: Create a new issue in a GitHub repository</li>
      <li><strong>create_pull_request</strong>: Create a new pull request in a GitHub repository</li>
      <li><strong>create_pull_request_review</strong>: Create a review on a pull request</li>
      <li><strong>create_repository</strong>: Create a new GitHub repository in your account</li>
    </ul>
  </div>

  <p>These tools enable AI assistants to perform tasks like searching for repositories with specific characteristics, analyzing code across multiple repositories, fetching documentation, and interacting with GitHub's collaboration features. This integration creates powerful workflows where AI can help with code discovery, repository exploration, and automated repository management tasks.</p>
  
  <p><strong>Want to try it yourself?</strong> There are demo scripts in this repository that make it easy to run the GitHub MCP Server locally and experiment with its capabilities. See the <a href="#github-mcp-demo">GitHub MCP Server Demo</a> section in the appendix for step-by-step instructions.</p>

  <h2 id="conclusion">Conclusion</h2>

  <p>AI-assisted coding tools have evolved from simple completion suggestions to sophisticated agents capable of complex software engineering tasks. While these systems are reshaping developer productivity and code quality, their rapid evolution presents challenges. Standardized evaluation benchmarks remain nascent, and real-world reliability varies considerably. As these technologies mature, finding the right balance between automation and human oversight will be key to unlocking their full potential while maintaining code quality and developer agency.</p>
</d-article>

<d-appendix>
  <h3 id="github-mcp-demo">GitHub MCP Server Demo</h3>

  <p><a href="https://github.com/amrit110/ai-assisted-engineering">This repository</a> includes scripts to help you run and experiment with the GitHub MCP Server. To get started:</p>

  <h4>Step 1: Deploy the GitHub MCP Server</h4>
  <p>Run the <code>deploy-github-mcp-server.sh</code> script to start the GitHub MCP Server locally using Docker:</p>
  <pre><code>chmod +x deploy-github-mcp-server.sh
./deploy-github-mcp-server.sh</code></pre>

  <p>The first time you run this script, it will create a sample <code>.env</code> file. Edit this file to add your GitHub Personal Access Token, then run the script again.</p>

  <h4>Step 2: Run Example Demos</h4>
  <p>With the server running, you can use the Python example script to explore GitHub MCP functionality:</p>
  <pre><code>python github_mcp_example.py --list_demos</code></pre>

  <p>Available demo options include:</p>
  <ul>
    <li><code>--display_tools</code>: Show all available GitHub MCP tools</li>
    <li><code>--search_repos</code>: Search for popular GitHub repositories</li>
    <li><code>--get_readme</code>: Fetch and display README from a repository</li>
    <li><code>--list_org_repos</code>: List repositories from a specific organization</li>
    <li><code>--get_repo_file</code>: Fetch a specific file from a repository</li>
    <li><code>--run_all</code>: Run all demos in sequence</li>
  </ul>

  <p>Example usage:</p>
  <pre><code>python github_mcp_example.py --search_repos</code></pre>

  <h4>Requirements</h4>
  <ul>
    <li>Docker installed on your system</li>
    <li>GitHub Personal Access Token</li>
    <li>Python with rich library installed (<code>pip install rich</code>)</li>
  </ul>

  <h3 id="acknowledgements">Acknowledgments</h3>
  <p>
    We are grateful to x, y, z, and others for extensive feedback on the article.
  </p>

  <d-footnote-list></d-footnote-list>
  <d-bibliography src="references.bib"></d-bibliography>
  <d-citation-list></d-citation-list>
</d-appendix>

</body>
