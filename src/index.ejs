<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=1300">
  <style id="distill-article-specific-styles">
    <%= require("raw-loader!./style.css") %>
  </style>
  <style>
    /* Override default list styling to prevent double bullets */
    d-contents ul, d-contents li {
      list-style-type: none !important;
    }
    d-contents li::marker {
      display: none !important;
      content: '' !important;
    }
  </style>
  <script src="https://distill.pub/template.v2.js"></script>
  <!-- Bundle will be automatically injected here by webpack -->
</head>
<body>

<d-front-matter>
  <script type="text/json">{
  "title": "AI Assisted Engineering",
  "description": "A blog post about AI assisted engineering",
  "authors": [
    {
      "author": "Amrit Krishnan",
      "authorURL": "https://github.com/amrit110",
      "affiliation": "Vector Institute",
      "affiliationURL": "https://vectorinstitute.ai"
    }, {
      "author": "",
      "authorURL": "",
      "affiliation": "",
      "affiliationURL": ""
    }
  ],
  "katex": {
    "delimiters": [
      {"left": "$", "right": "$", "display": false},
      {"left": "$$", "right": "$$", "display": true}
    ]
  }
  }</script>
</d-front-matter>

<d-title>
  <h1>AI Assisted Engineering</h1>
  <p>
    Software engineering is undergoing a transformation with the advent of AI-assisted tools. This blog explores the evolution of these tools, from simple code completion to sophisticated agentic assistants that can reason about and modify entire codebases.
  </p>
</d-title>

<d-byline></d-byline>

<d-article>
  <d-contents>
    <nav class="toc figcaption">
      <h4>Table of Contents</h4>
      <div class="toc-section"><a href="#introduction">Introduction</a></div>
      <div class="toc-section"><a href="#language-server-protocols">Language Server Protocols</a></div>
      <div class="toc-section"><a href="#github-copilot">GitHub Copilot</a></div>
      <div class="toc-section"><a href="#agentic-coding-assistants">Agentic Coding Assistants</a></div>
      <div class="toc-section"><a href="#conclusion">Conclusion</a></div>
    </nav>
    <div class="toc-line"></div>
  </d-contents>

  <h2 id="introduction">Introduction</h2>

  <p>AI-assisted software engineering represents a significant paradigm shift in how developers write, test, and maintain code. This blog explores the evolution of AI tools in the software development ecosystem, from simple code completions to sophisticated agentic assistants that can reason about and modify entire codebases.</p>

  <h2 id="language-server-protocols">Language Server Protocols</h2>

  <p>The Language Server Protocol (LSP) is a powerful open standard that defines a communication protocol between code editors or IDEs (the client) and language servers that provide language-specific features. Developed by Microsoft to support Visual Studio Code, LSP has become an industry standard adopted by many editors and IDEs.</p>
  
  <p>At its core, LSP solves a critical problem in the development ecosystem: how to provide rich language features (like code completion, error checking, and refactoring) without having to implement them separately for each editor and each programming language. Instead of requiring each editor to implement language support for every language, LSP creates a standardized way for editors to communicate with language-specific servers.</p>

  <h3>How LSP Works</h3>
  
  <p>When you open a file in your editor, the editor (acting as a client) connects to a language server that understands that specific programming language. As you type, the editor sends the source code and user actions to the language server using JSON-RPC messages over a communication channel. The language server analyzes the code and sends back information such as:</p>
  
  <ul>
    <li>Code completion suggestions (e.g., showing method names as you type)</li>
    <li>Diagnostics (errors and warnings in your code)</li>
    <li>Code formatting recommendations</li>
    <li>Symbol definitions and references (for "go to definition" features)</li>
    <li>Refactoring suggestions</li>
  </ul>

  <p>For example, when you type <code>document.</code> in JavaScript, the editor sends this context to the JavaScript language server, which responds with a list of valid methods and properties that can follow. This all happens through standardized JSON-RPC messages defined by the LSP specification.</p>

  <figure class="l-screen" style="width: 100%; margin: 30px 0; padding: 0;">
    <div id="lsp-diagram" style="width: 100%; height: 420px; margin: 0 auto; background-color: transparent; border-radius: 8px; position: relative; overflow: hidden; border: 1px solid #e5e5e5; box-shadow: 0 0 20px rgba(0,0,0,0.05);">
      <!-- Fixed diagram with animations -->
      <svg width="100%" height="100%" viewBox="0 0 1200 400" xmlns="http://www.w3.org/2000/svg">
        <!-- Definitions for markers -->
        <defs>
          <!-- Right arrow -->
          <marker id="arrow-head" viewBox="0 0 10 10" refX="5" refY="5" markerWidth="6" markerHeight="6" orient="auto">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="#5a5a5a" />
          </marker>
          <!-- Left arrow -->
          <marker id="arrow-tail" viewBox="0 0 10 10" refX="5" refY="5" markerWidth="6" markerHeight="6" orient="auto-start-reverse">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="#5a5a5a" />
          </marker>
          
          <!-- Animation definitions -->
          <style>
            .animated-line {
              stroke-dasharray: 10 8;
              animation: dash 2.5s linear infinite;
            }
            
            @keyframes dash {
              to {
                stroke-dashoffset: -36;
              }
            }
            
            .pulse-comp {
              animation: pulse 3.5s ease-in-out infinite;
            }
            
            @keyframes pulse {
              0% { fill: #0078d4; }
              50% { fill: #2b88d8; }
              100% { fill: #0078d4; }
            }
            
            .box-shadow {
              filter: drop-shadow(0px 2px 3px rgba(0, 0, 0, 0.15));
            }
          </style>
        </defs>

        <!-- Editor side -->
        <rect x="50" y="20" width="300" height="360" fill="none" stroke="#a0a0a0" stroke-dasharray="4" rx="6" />
        <text x="200" y="45" text-anchor="middle" fill="#555" font-family="system-ui, -apple-system, sans-serif" font-weight="600">Editor</text>
        
        <rect class="box-shadow" x="80" y="80" width="100" height="60" fill="#f0f0f0" stroke="#c0c0c0" rx="6" />
        <text x="130" y="112" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif">UI</text>
        
        <rect class="box-shadow" x="220" y="80" width="100" height="60" fill="#f0f0f0" stroke="#c0c0c0" rx="6" />
        <text x="270" y="112" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif">Buffers</text>
        
        <!-- Language Client -->
        <rect class="box-shadow" id="lang-client" x="130" y="240" width="140" height="80" class="pulse-comp" fill="#0078d4" stroke="#0065b3" rx="6" />
        <text x="200" y="272" text-anchor="middle" fill="white" font-family="system-ui, -apple-system, sans-serif" font-weight="500">Language Client</text>
        <text x="200" y="292" text-anchor="middle" fill="white" font-family="system-ui, -apple-system, sans-serif" font-size="14px">(extension)</text>
        
        <!-- Middle -->
        <rect class="box-shadow" x="400" y="120" width="120" height="80" fill="#f0f0f0" stroke="#c0c0c0" rx="6" />
        <text x="460" y="162" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif">Source Code</text>
        
        <!-- LSP Label -->
        <rect x="435" y="245" width="50" height="26" fill="white" stroke="#5c98d2" stroke-width="1.5" rx="13" />
        <text x="460" y="262" text-anchor="middle" fill="#0078d4" font-family="system-ui, -apple-system, sans-serif" font-size="16px" font-weight="700" letter-spacing="0.5px">LSP</text>
        
        <!-- Server side -->
        <rect x="580" y="20" width="390" height="360" fill="none" stroke="#a0a0a0" stroke-dasharray="4" rx="6" />
        <text x="775" y="45" text-anchor="middle" fill="#555" font-family="system-ui, -apple-system, sans-serif" font-weight="600">Language Server</text>
        
        <rect class="box-shadow" x="600" y="80" width="140" height="80" fill="#f0f0f0" stroke="#c0c0c0" rx="6" />
        <text x="670" y="110" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif">Completion</text>
        <text x="670" y="130" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif" font-size="14px">Service</text>
        
        <rect class="box-shadow" x="780" y="80" width="140" height="80" fill="#f0f0f0" stroke="#c0c0c0" rx="6" />
        <text x="850" y="110" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif">Diagnostics</text>
        <text x="850" y="130" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif" font-size="14px">Service</text>
        
        <!-- JSON-RPC Router -->
        <rect class="box-shadow" id="json-rpc" x="600" y="240" width="140" height="80" class="pulse-comp" fill="#0078d4" stroke="#0065b3" rx="6" />
        <text x="670" y="272" text-anchor="middle" fill="white" font-family="system-ui, -apple-system, sans-serif" font-weight="500">JSON-RPC</text>
        <text x="670" y="292" text-anchor="middle" fill="white" font-family="system-ui, -apple-system, sans-serif" font-size="14px">Router</text>
        
        <rect class="box-shadow" x="780" y="240" width="140" height="80" fill="#f0f0f0" stroke="#c0c0c0" rx="6" />
        <text x="850" y="272" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif">Formatting</text>
        <text x="850" y="292" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif" font-size="14px">Service</text>
        
        <!-- Animated connections between Language Client and UI/Buffers -->
        <line x1="200" y1="240" x2="130" y2="140" stroke="#5c98d2" stroke-width="1.5" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />
        <line x1="245" y1="240" x2="270" y2="140" stroke="#5c98d2" stroke-width="1.5" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />
        
        <!-- Animated Connections with Labels -->
        <!-- Editor to Source connections -->
        <rect x="335" y="130" width="30" height="16" fill="white" stroke="#d0d0d0" rx="3" />
        <text x="350" y="143" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif" font-size="12px">R/W</text>
        <line x1="280" y1="140" x2="400" y2="140" stroke="#5c98d2" stroke-width="2" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />
        
        <!-- Source to Language Server connection - Read-only -->
        <rect x="520" y="130" width="30" height="16" fill="white" stroke="#d0d0d0" rx="3" />
        <text x="535" y="143" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif" font-size="12px">R</text>
        <line x1="520" y1="140" x2="600" y2="140" stroke="#5c98d2" stroke-width="2" class="animated-line" marker-end="url(#arrow-head)" />
        
        <!-- Server-side connections -->
        <line x1="670" y1="240" x2="670" y2="160" stroke="#5c98d2" stroke-width="2" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />
        <line x1="710" y1="240" x2="820" y2="160" stroke="#5c98d2" stroke-width="2" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />
        <line x1="740" y1="264" x2="780" y2="264" stroke="#5c98d2" stroke-width="2" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />
        
        <!-- Primary LSP connection - the main JSON-RPC communication path -->
        <line x1="270" y1="280" x2="600" y2="280" stroke="#0078d4" stroke-width="3" class="animated-line" marker-start="url(#arrow-tail)" marker-end="url(#arrow-head)" />
        
        <!-- LSP label on the connection -->
        <rect x="420" y="270" width="70" height="20" fill="white" stroke="#5c98d2" rx="4" />
        <text x="455" y="285" text-anchor="middle" fill="#444" font-family="system-ui, -apple-system, sans-serif" font-size="12px" font-weight="500">JSON-RPC</text>
      </svg>
    </div>
    <figcaption style="margin-top: 20px; text-align: left; max-width: 1000px; margin-left: auto; margin-right: auto;">
      <p>The Language Server Protocol architecture separates editor functionality from language-specific features. The animated lines show JSON-RPC messages flowing between the language client (in the editor) and language server through a standardized protocol. The R/W indicates read/write operations with source code, while R indicates read-only operations.</p>
    </figcaption>
  </figure>
  
  <p>This architecture has revolutionized developer tools by enabling:</p>
  
  <ul>
    <li><strong>Editor independence</strong>: Language servers work with any LSP-compatible editor</li>
    <li><strong>Language independence</strong>: Editors don't need built-in knowledge of each language</li>
    <li><strong>Shared investment</strong>: The community can improve one language server that benefits all editors</li>
    <li><strong>Consistent experience</strong>: Features work the same way across different editors</li>
  </ul>
  

  <h2 id="github-copilot">GitHub Copilot</h2>

  <p>GitHub Copilot represents one of the most widely adopted AI pair programming tools, using large language models to suggest code completions based on context. Trained on billions of lines of public code, Copilot can generate everything from simple functions to complex algorithms.</p>

  <figure style="text-align: center; margin: 30px auto;">
    <img src="./diagrams/copilot.gif" alt="GitHub Copilot in action" style="width: 100%; max-width: 700px; margin: 0 auto;">
    <figcaption style="margin-top: 10px; text-align: center; max-width: 700px; margin-left: auto; margin-right: auto;">
      <p>GitHub Copilot suggests code completions in real-time as developers type, offering context-aware recommendations that can significantly speed up development.</p>
    </figcaption>
  </figure>

  <h2 id="agentic-coding-assistants">Agentic Coding Assistants</h2>

  <p>The latest evolution in AI-assisted development are agentic coding assistants that can take on more complex, multi-step programming tasks. Unlike simple code completion tools, these agents can reason about codebases, plan solutions, and execute multiple actions to solve problems.</p>


  <figure style="text-align: center; margin: 30px auto;">
    <img src="./diagrams/agent.svg" alt="Agentic Software Engineering Assistant" style="width: 100%; max-width: 700px; margin: 0 auto;">
    <figcaption style="margin-top: 10px; text-align: center; max-width: 700px; margin-left: auto; margin-right: auto;">
        <p>Agents are LLMs using tools based on environmental feedback in a loop.<d-cite key="anthropic2023building"/></p>
    </figcaption>
  </figure>


  <figure style="text-align: center; margin: 30px auto;">
    <img src="./diagrams/swe-agent.png" alt="Agentic Software Engineering Assistant" style="width: 100%; max-width: 700px; margin: 0 auto;">
    <figcaption style="margin-top: 10px; text-align: center; max-width: 700px; margin-left: auto; margin-right: auto;">
      <p>SWE-agent is an example of a coding agent. Its environment consists of a computer with a terminal and a file system. Its set of actions includes navigating the repository, searching files, viewing files, and editing lines.<d-cite key="huyenagents"/><d-cite key="yang2024swe"/></p>
    </figcaption>
  </figure>

  <h2 id="conclusion">Conclusion</h2>

  <p>The rapid evolution of AI-assisted software engineering tools is transforming how developers work. From language servers providing foundational capabilities to agentic assistants that can handle complex tasks, these technologies are reshaping productivity, code quality, and the developer experience.</p>
</d-article>

<d-appendix>
  <h3 id="acknowledgements">Acknowledgments</h3>
  <p>
    We are grateful to x, y, z, and others for extensive feedback on the article.
  </p>

  <d-footnote-list></d-footnote-list>
  <d-bibliography src="references.bib"></d-bibliography>
  <d-citation-list></d-citation-list>
</d-appendix>

</body>
